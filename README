KERNING INPUT FILE COMPILER

This is a pretty raw compiler for the Kerning Input File, a text file to
kern fonts in TrueType AAT. Its output is a hex code for the state
machine kerning table that you fuse into a font with OS X Font Tools.


REQUIREMENTS & USAGE

You'll need a dump of your font's 'post' table first. It will be used to
lookup the glyph names, so the table has to be in a format that actually
lists those. Produce the dump with OS X Font Tools by running:

ftxdumperfuser --table post --output post.xml font.ttf

Having both the 'post' dump and your kerning file in place, simply run:

kif.sh post.xml kern.kif >kerx.xml

That will make a file full of hex code for your kerning table, that can
be now fused into the font, again with the Font Tools:

ftxdumperfuser --table kerx --generic --datafile kerx.xml font.ttf

Hex code in the kern data file is nicely formatted and commented, what
can be of much help in case something goes wrong in the process.


THE KIF FILE FORMAT

Kerning Input File, although it once had a mention in Font Tools docs,
hasn't apparently been published by Apple. Here is a reconstruction
of the format based on Morph Input File, a related format still in use.

Parts common to all AAT state machines, i.e., the class listing and the
state table, follow the MIF syntax literally; the rest is modified to
handle the specifics of the kerning table as follows.

Subtable header is shortened to Type and Orientation, both required
fields. These are supplemented with additional Cross-stream flag of a
yes/no value that defaults to 'no':

Type Contextual/Attachment
Orientation H/V
Cross-stream yes/no

In the contextual kerning subtable, the entry table has a Push? flag,
which pushes the current glyph onto the kern stack, and a single action,
KernValues, that names the list of kern values to apply on the stack:

    GoTo        Push?   Advance?    KernValues
1   StateName   yes/no  yes/no      ListName/none
2   ...

Lists of values follow, each with a name on its own line, and the values
indented on the line beneath. Each value is applied to the kern stack
in order of popping the stack glyph by glyph until the list is consumed:

ListName
    KernValue KernValue ...

For the cross-stream kerning subtables, a special value, Reset, can be
used within the list of values. It makes the glyph to which it is
applied be reset to baseline from any accumulated cross-stream kern.

In the attachment positioning subtable, there's the usual Mark? flag,
which marks the current glyph for later use, and one of the three
possible types of actions: MatchPoints, MatchAnchors, or MatchCoords:

    GoTo        Mark?   Advance?    MatchPoints
1   StateName   yes/no  yes/no      PointSetName/none
2   ...

    GoTo        Mark?   Advance?    MatchAnchors
1   StateName   yes/no  yes/no      AnchorSetName/none
2   ...

    GoTo        Mark?   Advance?    MatchCoords
1   StateName   yes/no  yes/no      CoordSetName/none
2   ...

Each type declares if the values are to be interpreted as control point
indices, anchor indices, or pairs of coordinates, and each refers to a
set of both marked and current glyph values that define the match point.
These are defined last, and take a form respective to the action type:

PointSetName
    Marked PointIndex
    Current PointIndex

AnchorSetName
    Marked AnchorIndex
    Current AnchorIndex

CoordSetName
    Marked XCoord YCoord
    Current XCoord YCoord

For each type, the points the values resolve to within a given glyph
space are used to align the current glyph to the marked one so that the
points in both glyphs match.

This concludes a subtable. Please see the accompanying example directory
for a working example and more commentary.


LIMITATIONS

For now, only the two, both state machine-based subtables for contextual
kerning and attachment are available to use. Moreover, the relatively
recent attachment positioning can be used within the 'kerx' table only.

The 'kerx' extended kerning table is not fully documented, so consider
the code produced as being in part reverse-engineered with all the usual
caveats. In case any issues should arise, an -l option to the compiler
will produce the legacy 'kern' table that's still supported in CoreText
on both OS X and iOS.

Specifying kerning variations, part of the TrueType Variations
technology found originally in AAT, is also currently not available.


COPYRIGHT & LICENSE NOTICE

This work is copyrighted by Grzegorz Rolek, 2013, and is subject to the
BSD 3-Clause License. Please see LICENSE for details.
